#!/usr/bin/env bash
#!/usr/bin/awk -f
TOOLS_WS=${TOOLS_WS:-$(pwd)}
multi_node=0
source $TOOLS_WS/testers/smgr_utils

#install ant on cfgm0
function install_ant() {

    sshpass -p c0ntrail123 ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $API_SERVER_HOST_STRING " (
        set -x
        echo "Temporary workaround to installfabric on CFGM"
        /opt/contrail/contrail_packages/setup.sh
        cp /root/sources.list /etc/apt/

        #remove mediubuntu entry from sources.list temporarily as it's causing apt-get update to fail.
        sed -i".bak" '/packages.medibuntu.org/d' /etc/apt/sources.list

        apt-get update
        apt-get -y --force-yes --allow-unauthenticated install ant
        if [ $? == 0 ]
        then
            echo "ant package installation is done"
        else
            echo "ant  package installation failed"
            exit 1
        fi
        #temporary fix to take care of issue due to different paramiko version
        pip uninstall -y paramiko
        pip install paramiko==1.17.0

        mv /usr/local/lib/python2.7/dist-packages/easy-install.pth /usr/local/lib/python2.7/dist-packages/easy-install.pth.orig
        if [ $? == 0 ]
        then
            echo "moving easy-install.pth sucessfull"
        else
            echo "moving easy-install.pth failed, sanity will fail to run"
        fi   
    ) "

}


function add_sourcelist_SMLite() {
 
    set -x
    HOSTS=`cat "${TOOLS_WS}/testbeds/${tb_filename}" | grep "host[0-9]\s\=" | awk '{print $3}' | awk -F'@' '{print $2}' | tr -d "'"`
    echo $HOSTS
    for word in $HOSTS
    do
        echo $word
        sshpass -p "c0ntrail123" ssh -l root -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $word " {
   
            cp /etc/apt/sources.list /etc/apt/sources.list.orig
            sed -i".bak" '/google/d' /etc/apt/sources.list.save
            cp /etc/apt/sources.list.save /etc/apt/sources.list
            if [ $? != 0 ]
                then
                echo "failed to replace sources.list with sources.list.save on node!!!"
            else
                echo "replaced sources.list with sources.list.save on node"
            fi
            #remove mediubuntu entry from sources.list temporarily as it's causing apt-get update to fail.
            sed -i".bak" '/packages.medibuntu.org/d' /etc/apt/sources.list

            apt-get update
            apt-get -y install gdb
    } "
    sleep 10
    done


}


function reimage_setup_using_SM {
    if [ $SKIP_REIMAGE -ne 0 ]
    then
        return 0
    fi

    if [[ $DISTRO =~ ubuntu-14.04 ]]; then
        image_id="ubuntu-14.04.5"
	image="/cs-shared/images/ubuntu-14.04.5-server-amd64.iso"
        pkg_type="contrail-ubuntu-package"
        iso_type="ubuntu"
        if [[ $SKU =~ vcenter ]]; then
            SMID=ubuntu14$VCENTER_TEST_SKU${BUILDID}
        else
            SMID=ubuntu14$SKU${BUILDID}
        fi
        isofile="/root/images/image145.json"
    elif [[ $DISTRO =~ ubuntu-16.04 ]]; then
        image_id="ubuntu-16.04.2.minimal"
	image="/cs-shared/images/ubuntu-16.04.2-server-amd64.iso"
        pkg_type="contrail-ubuntu-package"
        iso_type="ubuntu"
        if [[ $SKU =~ vcenter ]]; then
            SMID=ubuntu16$VCENTER_TEST_SKU${BUILDID}
        else
            SMID=ubuntu16$SKU${BUILDID}
        fi
        isofile="/root/images/image-16.04.2-minimal-ks.json"
    elif [[ ${CENTOS_72} -eq 1 ]];then
        image_id="centos-7.2"
	image="/root/images/CentOS-7-x86_64-Minimal-1511.iso"
        pkg_type="contrail-centos-package"
        iso_type="redhat"
        SMID=centos72$SKU${BUILDID}
        contrail_pkg=`ls /cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/contrail-install-packages*.rpm`
        isofile="/root/images/centos72.json"
    elif [[ $DISTRO =~ centos71 ]]; then
        image_id="centos-7.1"
	image="/root/images/CentOS-7-x86_64-Minimal-1503-01.iso"
        pkg_type="contrail-centos-package"
        iso_type="redhat"
        SMID=centos71$SKU${BUILDID}
        contrail_pkg=`ls /cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/contrail-install-packages*.rpm`
        isofile="/root/images/centos71.json"
    fi

    # check whether skip_reimage of servers set
    reimage_flag=0
    reimage_flag=$(sshpass -p "c0ntrail123" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l root $SM_SERVER_IP '/usr/bin/server-manager-client display server --detail --json | grep -A2 tag | grep skip_reimage | grep -c true')

    echo "Cconnect to SM_SERVER to reimage the targets"
    sshpass -p "c0ntrail123" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l root $SM_SERVER_IP " (
        set -e
        echo "reimage the target setup"
        if [ $reimage_flag == 0 ]
        then
            server-manager-client reimage -F --cluster_id $CLUSTER_NAME ${image_id}
            if [ $? == 0 ]
            then
               echo "Issue of Reimage command to reimage target nodes is sucessful!!!"
            else
               echo "Issue of Reimage command to reimage target nodes failed, aborting the process"
               exit 1
            fi
        else
	    # use server.json defined images so that esxi and ubuntu will take different image parameters
            echo "use tag to avoid reimaging servers which dont need it"
            #server-manager reimage -F --tag skip_reimage=false ${image_id}
            server-manager reimage -F --tag skip_reimage=false
            if [ $? == 0 ]
            then
               echo "Issue of Reimage command to reimage target nodes is sucessful!!!"
            else
               echo "Issue of Reimage command to reimage target nodes failed, aborting the process"
               exit 1
            fi
        fi

        echo "reimage in progress please wait ..."
        sleep 10

        #check if reimage is completed.
        if [ $reimage_flag == 0 ]
        then
            /root/sm_files/check_reimage_cliff.sh $CLUSTER_NAME
            if [ $? == 0 ]
            then
               echo "reimaged the target nodes successfully"
            else
               echo "reimage of target nodes failed!!!"
               exit 1
            fi
        else
            echo "check only those servers issued reimage based on tags"
            /root/sm_files/check_reimage_tags_cliff.sh "skip_reimage=false"
            if [ $? == 0 ]
            then
               echo "reimaged the target nodes successfully"
            else
               echo "reimage of target nodes failed!!!"
               exit 1
            fi
        fi

    ) "
    if [ $? == 0 ]
    then
        echo "reimaged the target $CLUSTER_NAME successfully"
        sleep 150
    else
        echo "reimage of target $CLUSTER_NAME failed!!!"
        exit 1
    fi

}

# Get the json files for server and cluster
# if any apecified.
function set_json_file_path {
    set -x
    folder_path=''
    json=''

    folder_path="${TOOLS_WS}/jsons"
    json=$folder_path/$JSON

    export ABS_PATH_JSON=$json

}


#check if the server-manager pkgs are available in artifacts folder.
function SMLite_check_SM_pkg_availability() {
    count=0
    SMLite_get_node_distro
    if [[ $CB_SANITY -eq 1 ]]; then
        if [[ $DISTRO =~ ubuntu-16 ]]; then
            if [[ $SKU =~ vcenter ]]; then
                smpkg_dir="/cs-build/CB-${BRANCH}-ubuntu16-${VCENTER_TEST_SKU}/${BUILDID}"
            else
                smpkg_dir="/cs-build/CB-${BRANCH}-ubuntu16-${SKU}/${BUILDID}"
		if [[ $TESTBED_LOCATION_US -eq 1 ]];then
		    smpkg_dir="/cs-build/CB-${BRANCH}-ubuntu16-${SKU}/builds/${BUILDID}/archive/packages"
		fi
            fi
        else
            if [[ $SKU =~ vcenter ]]; then
                smpkg_dir="/cs-build/CB-${BRANCH}-ubuntu14-${VCENTER_TEST_SKU}/${BUILDID}"
            else
                smpkg_dir="/cs-build/CB-${BRANCH}-ubuntu14-${SKU}/${BUILDID}"
                if [[ $TESTBED_LOCATION_US -eq 1 ]];then
                    smpkg_dir="/cs-build/CB-${BRANCH}-ubuntu14-${SKU}/builds/${BUILDID}/archive/packages"
                fi      
            fi
        fi
    else
        if [[ $SKU =~ vcenter ]]; then
            smpkg_dir="/cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${VCENTER_TEST_SKU}/artifacts"
        else
            smpkg_dir="/cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/artifacts"
        fi
    fi
    echo $SERVER_MANAGER_INSTALLER

    while [ "$count" -ne 36 ]; do
        if ls $smpkg_dir/${SERVER_MANAGER_INSTALLER}
        then
            echo "SM pkgs are present in artifacts"
            break
        else
            if [ "$count" -eq 35 ]
            then
                echo "waited for an hour, still pkgs are not found, aborting"
                exit 1
            fi
            echo "SM pkgs are still not there, let's wait..."
            sleep 100
            count=$((count+1))
        fi
    done
}


function SMLite_get_node_distro() {
    sleep 10
    lsb_dist_output=`exec_cmds -s ${API_SERVER_HOST_STRING} -p ${API_SERVER_HOST_PASSWORD} -c "
        cat /etc/lsb-release"`
    if [[ $lsb_dist_output =~ Ubuntu ]]; then
        lsb_dist=Ubuntu
        if [[ $CB_SANITY -eq 1 ]]; then
            SERVER_MANAGER_INSTALLER="contrail-server-manager-installer_*.deb"
        else
            if [[ $SKU =~ vcenter ]]; then
                SERVER_MANAGER_INSTALLER="contrail-server-manager-installer_*\.*-${BUILDID}\~$VCENTER_TEST_SKU\_all.deb"
            else
                SERVER_MANAGER_INSTALLER="contrail-server-manager-installer_*\.*-${BUILDID}\~$SKU\_all.deb"
            fi
        fi
        if [[ $SKU =~ vcenter ]]; then
            CONTRAIL_PACKAGE="contrail-vcenter-docker_*.tgz"
        else
            CONTRAIL_PACKAGE="contrail-cloud-docker_*.tgz"
        fi
    else
        lsb_dist=SomeOtherOS
        SERVER_MANAGER_INSTALLER="contrail-server-manager-installer-*\.*-${BUILDID}*.el6.noarch.rpm"
        CONTRAIL_PACKAGE="contrail-install-packages*(.rpm)"
    fi
    export lsb_dist
    export SERVER_MANAGER_INSTALLER
    export CONTRAIL_PACKAGE
}

#Remove existing SM config
function purge_sm_config() {
    exec_cmds -s ${API_SERVER_HOST_STRING} -p ${API_SERVER_HOST_PASSWORD} -c "
        server-manager delete server --cluster_id $CLUSTER_NAME
        server-manager delete cluster --cluster_id $CLUSTER_NAME
        server-manager delete image --image_id $SMID
        service contrail-server-manager stop
        rm /root/contrail-server-manager-installer_*;
        rm /root/contrail-vcenter-docker_*;
        dpkg -l | grep contrail | awk '{ print \$2 }' | xargs dpkg -P;
        dpkg -l | grep puppet | awk '{ print \$2 }' | xargs dpkg -P;
        dpkg -l | grep cobbler | awk '{ print \$2 }' | xargs dpkg -P;
        dpkg -l | grep passenger | awk '{ print \$2 }' | xargs dpkg -P;
        rm -rf /var/www/html/thirdparty_packages /opt/contrail/ /etc/puppet/ /var/lib/puppet /usr/share/puppet;
        rm -rf /etc/apt/sources.list.d/*.list;
        a2dismod passenger;
        apt-get update > /dev/null 2>&1;
        "
}

#Copy vmdk image onto the node
function copy_vmdk() {

    if [[ $DISTRO =~ ubuntu-14 ]]; then
        distro_vmdk="14.04"
        vmdk_image="ContrailVM1404-ovf.tar"
    elif [[ $DISTRO =~ ubuntu-16 ]]; then
        distro_vmdk="16.04"
        vmdk_image="ContrailVM1604-ovf.tar"
    fi

    vmdk_path="/cs-shared/contrail-vcenter/vmdk/$distro_vmdk/LATEST"

    exec_cmds -s ${SMLITE_SERVER} -p ${API_SERVER_HOST_PASSWORD} -c "mkdir -p /root/vmdk"
    sshpass -p "c0ntrail123" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r ${vmdk_path}/${vmdk_image} ${SMLITE_SERVER}:/root/vmdk/vmdk.tar

    if [ $? == 0 ]
    then
        echo "Copying of vmdk is successfull"
    else
        echo "Copying of vmdk failed!"
        exit 1
    fi

}

#copy SM-lite and contrail-packages to CFGM&SM-Lite server
function copy_smlite_pkg() {

    set -x
    #check if SM pkgs are available in artifacts before proceeding further.
    SMLite_check_SM_pkg_availability || die "SM pkg not available in artifacts"

    if [[ $CB_SANITY -eq 1 ]]; then
        if [[ $DISTRO =~ ubuntu-16 ]]; then
            if [[ $SKU =~ vcenter ]]; then
                pkg_dir="/cs-build/CB-${BRANCH}-ubuntu16-${VCENTER_TEST_SKU}/${BUILDID}"
            else
                pkg_dir="/cs-build/CB-${BRANCH}-ubuntu16-${SKU}/${BUILDID}"
                if [[ $TESTBED_LOCATION_US -eq 1 ]];then
                    pkg_dir="/cs-build/CB-${BRANCH}-ubuntu16-${SKU}/builds/${BUILDID}/archive/packages"
                fi
            fi
        else
            if [[ $SKU =~ vcenter ]]; then
                pkg_dir="/cs-build/CB-${BRANCH}-ubuntu14-${VCENTER_TEST_SKU}/${BUILDID}"
            else
                pkg_dir="/cs-build/CB-${BRANCH}-ubuntu14-${SKU}/${BUILDID}"
                if [[ $TESTBED_LOCATION_US -eq 1 ]];then
                    pkg_dir="/cs-build/CB-${BRANCH}-ubuntu14-${SKU}/builds/${BUILDID}/archive/packages"
                fi
            fi
        fi
    else
        if [[ $SKU =~ vcenter ]]; then
            pkg_dir="/cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${VCENTER_TEST_SKU}"
        else
            pkg_dir="/cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}"
        fi
    fi

    echo $CONTRAIL_PACKAGE
    echo $SERVER_MANAGER_INSTALLER
    sleep 30
    if [ -z $JSON ]; then
        if [[ $CB_SANITY -eq 1 ]]; then
            sshpass -p "c0ntrail123" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r ${pkg_dir}/${SERVER_MANAGER_INSTALLER} ${pkg_dir}/${CONTRAIL_PACKAGE} $ABS_PATH_TBFILE ${SMLITE_SERVER}:/root/
            sshpass -p "c0ntrail123" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r $ABS_PATH_TBFILE ${API_SERVER_HOST_STRING}:/root/
        else
            sshpass -p "c0ntrail123" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r ${pkg_dir}/artifacts/${SERVER_MANAGER_INSTALLER} ${pkg_dir}/artifacts/${CONTRAIL_PACKAGE} $ABS_PATH_TBFILE ${SMLITE_SERVER}:/root/
            sshpass -p "c0ntrail123" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r $ABS_PATH_TBFILE ${API_SERVER_HOST_STRING}:/root/
        fi
	exec_cmds -s root@$SM_SERVER_IP -p "c0ntrail123" -c "sshpass -p ${API_SERVER_HOST_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /root/sm_files/check_provision_cliff.sh ${SMLITE_SERVER}:/root/"
    else
        if [[ $CB_SANITY -eq 1 ]]; then
            sshpass -p "c0ntrail123" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r ${pkg_dir}/${SERVER_MANAGER_INSTALLER} ${pkg_dir}/${CONTRAIL_PACKAGE} $ABS_PATH_JSON $ABS_PATH_TBFILE ${SMLITE_SERVER}:/root/
            sshpass -p "c0ntrail123" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r $ABS_PATH_TBFILE ${API_SERVER_HOST_STRING}:/root/
        else
            sshpass -p "c0ntrail123" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r ${pkg_dir}/artifacts/${SERVER_MANAGER_INSTALLER} ${pkg_dir}/artifacts/${CONTRAIL_PACKAGE} $ABS_PATH_JSON $ABS_PATH_TBFILE ${SMLITE_SERVER}:/root/
            sshpass -p "c0ntrail123" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r $ABS_PATH_TBFILE ${API_SERVER_HOST_STRING}:/root/
        fi
	exec_cmds -s root@$SM_SERVER_IP -p "c0ntrail123" -c "sshpass -p ${API_SERVER_HOST_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /root/sm_files/check_provision_cliff.sh ${SMLITE_SERVER}:/root/"
    fi
    if [ $? == 0 ]
    then
        echo "Copy of ${SERVER_MANAGER_INSTALLER} and ${CONTRAIL_PACKAGE} to SMLITE server is successfull"
    else
        echo "Copy of ${SERVER_MANAGER_INSTALLER} and ${CONTRAIL_PACKAGE} to SMLITE server is failed!!!"
        exit 1
    fi

}



# This function will provision the provided setup.
function provision_using_SMLite() {
    set -x
    if [ $SKIP_SM_PROVISION -ne 0 ]
    then
        return 0
    fi
  
    if [[ $DISTRO =~ ubuntu-14.04 ]]; then
        pkg_type="contrail-ubuntu-package"
        iso_type="ubuntu"
        SMID=ubuntu14$SKU${BUILDID}
        if [[ $SKU =~ mitaka ]]; then
	    ubuntu_rel="trusty"
        elif [[ $SKU =~ newton ]]; then
            ubuntu_rel="xenial"
        fi
    elif [[ $DISTRO =~ ubuntu-16 ]]; then
        pkg_type="contrail-ubuntu-package"
        iso_type="ubuntu"
        SMID=ubuntu16$SKU${BUILDID}
        ubuntu_rel="xenial"
    elif [[ ${CENTOS_72} -eq 1 ]];then
        pkg_type="contrail-centos-package"
        iso_type="redhat"
        SMID=centos72$SKU${BUILDID}
        contrail_pkg=`ls /cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/contrail-install-packages*.rpm`
    elif [[ $DISTRO =~ centos71 ]]; then
        pkg_type="contrail-centos-package"
        iso_type="redhat"
        SMID=centos71$SKU${BUILDID}
        contrail_pkg=`ls /cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/contrail-install-packages*.rpm`
    fi
 
    echo "Connect to SM_SERVER to provision the targets/cluster"

    if [[ $CB_SANITY -eq 1 ]]; then
        if [[ $DISTRO =~ ubuntu-16 ]]; then
            if [[ $SKU =~ vcenter ]]; then
                cntl_cloud_pkg_path=`ls /cs-build/CB-${BRANCH}-ubuntu16-${VCENTER_TEST_SKU}/${BUILDID}/contrail-vcenter-docker_*.tgz`
            else
                cntl_cloud_pkg_path=`ls /cs-build/CB-${BRANCH}-ubuntu16-${SKU}/${BUILDID}/contrail-cloud-docker_*.tgz`
                if [[ $TESTBED_LOCATION_US -eq 1 ]];then
                    cntl_cloud_pkg_path=`ls /cs-build/CB-${BRANCH}-ubuntu16-${SKU}/builds/${BUILDID}/archive/packages/contrail-cloud-docker_*.tgz`
                fi
            fi
        elif [[ $DISTRO =~ ubuntu-14 ]]; then
            if [[ $SKU =~ vcenter ]]; then
                cntl_cloud_pkg_path=`ls /cs-build/CB-${BRANCH}-ubuntu14-${VCENTER_TEST_SKU}/${BUILDID}/contrail-vcenter-docker_*.tgz`
            else
                cntl_cloud_pkg_path=`ls /cs-build/CB-${BRANCH}-ubuntu14-${SKU}/${BUILDID}/contrail-cloud-docker_*.tgz`
                if [[ $TESTBED_LOCATION_US -eq 1 ]];then
                    cntl_cloud_pkg_path=`ls /cs-build/CB-${BRANCH}-ubuntu14-${SKU}/builds/${BUILDID}/archive/packages/contrail-cloud-docker_*.tgz`
                fi
            fi
        fi
    else
        if [[ $SKU =~ vcenter ]]; then
            cntl_cloud_pkg_path=`ls /cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${VCENTER_TEST_SKU}/artifacts/contrail-vcenter-docker_*.tgz`
        else
            cntl_cloud_pkg_path=`ls /cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/artifacts/contrail-cloud-docker_*.tgz`
        fi
    fi
    cntl_pkg=/root/${cntl_cloud_pkg_path##*/}
    vcenter_param='openstack_sku": "vcenter'
    JSON_FILE_DIR=`dirname $ABS_PATH_JSON`

    if [[ $SKU =~ vcenter ]]; then
        echo '{"image":[{"category": "package", "id": "'$SMID'", "type": "'$pkg_type'", "path": "'$cntl_pkg'", "parameters":{"'$vcenter_param'"}, "version":"'$BUILDID'"}]}' > $JSON_FILE_DIR/image.json
        jq -s add $ABS_PATH_JSON $JSON_FILE_DIR/image.json > $JSON_FILE_DIR/combined.json
        mv $JSON_FILE_DIR/combined.json $ABS_PATH_JSON
    else
        echo '{"image":[{"category": "package", "id": "'$SMID'", "type": "'$pkg_type'", "path": "'$cntl_pkg'", "version":"'$BUILDID'"}]}' > $JSON_FILE_DIR/image.json
        jq -s add $ABS_PATH_JSON $JSON_FILE_DIR/image.json > $JSON_FILE_DIR/combined.json
        mv $JSON_FILE_DIR/combined.json $ABS_PATH_JSON
    fi

    copy_smlite_pkg || die "copy of sm-lite packages failed"
    sshpass -p "c0ntrail123" ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SMLITE_SERVER " (
        set -e
        set -x
        echo "Install SM-Lite and provision the target setup"
        dpkg -i /root/${SERVER_MANAGER_INSTALLER}
        if [ -z $JSON ]; then
            if [ $SKIP_SMLITE_INSTALL -ne 0 ]
            then
                /opt/contrail/contrail_server_manager/provision_containers.sh -ni -c /root/${CONTRAIL_PACKAGE} -t /root/${tb_filename} -cid $CLUSTER_NAME
            else
                /opt/contrail/contrail_server_manager/provision_containers.sh -c /root/${CONTRAIL_PACKAGE} -t /root/${tb_filename} -cid $CLUSTER_NAME
            fi
        else
            if [ $SKIP_SMLITE_INSTALL -ne 0 ]
            then
                if [[ ( $SKU =~ vcenter ) && ( $VCENTER_TEST_SKU != "mitaka" ) ]]; then
                    /opt/contrail/contrail_server_manager/provision_containers.sh -ni -j /root/${JSON} -sku ${VCENTER_TEST_SKU}
                elif [[ $SKU =~ ocata ]]; then
                    /opt/contrail/contrail_server_manager/provision_containers.sh -ni -j /root/${JSON} -sku ${SKU}
                else
                    /opt/contrail/contrail_server_manager/provision_containers.sh -ni -j /root/${JSON}
                fi
            else
                if [[ ( $SKU =~ vcenter ) && ( $VCENTER_TEST_SKU != "mitaka" ) ]]; then
                    /opt/contrail/contrail_server_manager/provision_containers.sh -j /root/${JSON} -sku ${VCENTER_TEST_SKU}
                elif [[ $SKU =~ ocata ]]; then
                    /opt/contrail/contrail_server_manager/provision_containers.sh -j /root/${JSON} -sku ${SKU}
                else
                    /opt/contrail/contrail_server_manager/provision_containers.sh -j /root/${JSON}
                fi
            fi
        fi

    ) "
    sleep 600 
    #assumption is by this time, SM is installed on cfgm0 and provision is at kernel upgrade and node reboot.

    cluster_name=$(sshpass -p "c0ntrail123" ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SMLITE_SERVER " (
        server-manager-client display cluster --json | grep id | cut -d : -f2 | sed -e 's/^ \"//' -e 's/\"$//'
    ) ")
    cluster_name=`echo $cluster_name | tr -d '\r'`

    sshpass -p "c0ntrail123" ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SMLITE_SERVER " (
        set -e
        set -x
        #check provisioing status.
        chmod +777 /root/check_provision_cliff.sh
	/root/check_provision_cliff.sh $cluster_name
        if [ "$?" -eq 0 ]
        then
            echo "Provisioning of the target/cluster is sucessfull!!!"
        else
            echo "Provisioning of the target/cluster failed!!! aborting the process"
            exit 1
        fi
    ) "; rv=$?
    #special case for SINGLE NODE
    if [ ${TEST_SETUP} == "SINGLENODE" ]
    then
        #connection to cfgm0 could have lost when provision of compute is done and node reboots.
        #let's wait for node to come back.
        sleep 180

        sshpass -p "c0ntrail123" ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SMLITE_SERVER " (
            set -e
            set -x
            #check provisioing status.
            chmod +777 /root/check_provision_cliff.sh
            /root/check_provision_cliff.sh $cluster_name
            if [ "$?" -eq 0 ]
            then
                echo "Provisioning of the target/cluster is sucessfull!!!"
            else
                echo "Provisioning of the target/cluster failed!!! aborting the process"
                exit 1
            fi
        ) "; rv=$?
    fi

    if [ $rv == 0 ]
    then
        echo "Provisioning of the target/cluster is sucessfull!!!"
    else
        echo "Provisioning of the target/cluster failed!!! aborting the process"
        exit 1
    fi

}

function run_smgr_task() {
    echo "Running tests on $1.."

    if [ ${TEST_SETUP} == "SINGLENODE" ]
    then
        multi_node=0
    elif [ ${TEST_SETUP} == "MULTINODE" ]
    then
        multi_node=1
    elif [ ${TEST_SETUP} == "MULTIINTERFACE" ]
    then
        multi_node=1
    else
        echo "TEST_SETUP is not defined, abort the process"
        exit 1
    fi

    if [ -z "$SM_SERVER_IP" ]
    then
        echo "SM_SERVER_IP is not set, unable to proceede, aborting the process"
        exit 1
    fi
    if [ -z $CLUSTER_NAME ] && [ -z $SERVER_NAME ]; then
        echo "CLUSTER_NAME/SERVER_NAME env is not set, aborting the process"
        exit 1
    fi
    create_testbed || die "Failed to create required testbed details"
    reimage_setup_using_SM || debug_and_die "Reimage failed!"
    JSON=`echo $TBFILE_NAME | sed 's/.py/.json/'`
    echo $JSON
    echo "JSON will be used to provision the setup."
    set_json_file_path || die "setting json file path for cluster and server failed"

    if [ -z $SMLITE_SERVER ];then
        SMLITE_SERVER=$API_SERVER_HOST_STRING
    fi

    # esxi/vcenter setup, cleanup vcenter and dockers
    if [[ ( $VCENTER_ONLY_TESTBED -eq 1 ) || ( $VCENTER_AS_COMPUTE_TESTBED -eq 1 ) ]]; then
	if [[ ( $VCENTER_ONLY_TESTBED -eq 1 ) ]]; then
            (cd ${TOOLS_WS}/contrail-fabric-utils
             fab cleanup_vcenter)
	fi
        if [[ $SKIP_REIMAGE -eq 1 ]]; then
            (cd ${TOOLS_WS}/contrail-fabric-utils
             fab cleanup_dockers)
            purge_sm_config
        else
            copy_vmdk || die "copy of vmdk image failed"
        fi
    fi
    provision_using_SMLite || die "provision failed"
    #add_sourcelist_SMLite || die "source.list copy failed on all target nodes"
    #check_kernel_upgrade || die "kernel upgrade failed"

    #add fab basic images.
    if [ $ADD_IMAGES -eq 1 ]; then
       (cd ${TOOLS_WS}/contrail-fabric-utils
        fab add_basic_images)
    fi

    search_package
    pkg_file_name=`basename $PKG_FILE`
    if [[ $USE_CLOUD_PKG -eq 1 ]]; then
        export PACKAGE_VERSION=`echo ${pkg_file_name} | sed 's/contrail-cloud-docker[_]\([0-9\.\-]*\)-.*/\1/'`
    elif [[ $USE_NETWORKING_PKG -eq 1 ]]; then
        export PACKAGE_VERSION=`echo ${pkg_file_name} | sed 's/contrail-networking-docker[_]\([0-9\.\-]*\)_.*/\1/'`
    elif [[ $SKU =~ vcenter ]]; then
        export PACKAGE_VERSION=`echo ${pkg_file_name} | sed 's/contrail-vcenter-docker[_]\([0-9\.\-]*\).*/\1/'`
    else
        export PACKAGE_VERSION=`echo ${pkg_file_name} | sed 's/contrail-cloud-docker[_]\([0-9\.\-]*\)-.*/\1/'`
    fi
    if [[ -z $TEST_HOST_STRING ]]; then
        export TEST_HOST_STRING=$API_SERVER_HOST_STRING
        export TEST_HOST_PASSWORD=$API_SERVER_HOST_PASSWORD
    fi
    export TEST_HOST_IP=`echo $TEST_HOST_STRING | cut -d @ -f2`
    export TEST_HOST_USER=`echo $TEST_HOST_STRING | cut -d @ -f1`
    install_third_party_pkgs || die "installing GDB/ant failed"
    setup_testnode || die "test node setup failed"
    install_dep_pkgs_for_test
    run_sanity_simple || die "run_sanity_simple failed"
    run_tempest || die "Run_Tempest step failed"
    collect_tech_support || die "Task to collect logs/cores failed"
    echo "Ending test on $1"
}
