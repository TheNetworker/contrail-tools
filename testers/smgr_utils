#!/usr/bin/env bash
TOOLS_WS=${TOOLS_WS:-$(pwd)}
multi_node=0

#check if the server-manager pkgs are available in artifacts folder.
function check_SM_pkg_availability() {
    count=0
    if [ $SM_TYPE -eq 1 ] 
    then
        if [ ${SKU} == "juno" ]
        then
            pkg_dir="/github-build/${BRANCH}/${BUILDID}/ubuntu-12-04/icehouse/artifacts"
        else
            pkg_dir="/github-build/${BRANCH}/${BUILDID}/ubuntu-12-04/${SKU}/artifacts"
        fi
    else
        pkg_dir="/github-build/${BRANCH}/${BUILDID}/centos64_os/${SKU}/artifacts"
    fi
    
    while [ "$count" -ne 36 ]; do
        if ls $pkg_dir/contrail-server-manager-installer*
        then
            echo "SM pkgs are present in artifacts"
            break
        else
            if [ "$count" -eq 35 ]
            then
                echo "waited for an hour, still pkgs are not found, aborting"
                exit 1
            fi
            echo "SM pkgs are still not there, let's wait..."
            sleep 100
        fi
    done
}

#upgrade/install SM on either cenots/ubuntu server.
#Multi-node setup will refer to SM running on ubuntu
#Single-node setup will refer to SM running on centos
function bringup_SM_setup() {
    if [ $SKIP_BRINGUP -ne 0 ]
    then
        return 0
    fi

    echo "Bringup/upgrade SM setup"

    #check if SM pkgs are available in artifacts before proceeding further.
    check_SM_pkg_availability || die "SM pkg not available in artifacts"

    cd $pkg_dir

    #SM pkg name is different for centos & ubuntu, so set it accordingly.
    #multi-node uses ubuntu SM and single node uses centos SM.
    if [ $SM_TYPE -eq 1 ] #if multi node refer to ubuntu folder
    then
        SM_SERVER_PKG_FILE=`ls contrail-server-manager-installer_[0-9]\.[0-9]-${BUILDID}\~$SKU\_all.deb*`
        echo $SM_SERVER_PKG_FILE
    else
        SM_SERVER_PKG_FILE=`ls contrail-server-manager-installer-[0-9]\.[0-9]-${BUILDID}\~$SKU.el6.noarch.rpm*`
        echo $SM_SERVER_PKG_FILE
    fi
    pkg_name="$pkg_dir/$SM_SERVER_PKG_FILE"

    #copy the SM PKGs to SM server.
    sshpass -p "c0ntrail123" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $pkg_name root@$SM_SERVER_IP:/root/sm_files

    echo "Connect to SM_SERVER to install/upgrade SM packages"
    sshpass -p "c0ntrail123" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l root $SM_SERVER_IP " (
        set -e

        if [ -e /root/sm_files/$SM_SERVER_PKG_FILE ] 
        then
            echo "file exists, upgrading Server manager"
            cd /root/sm_files; 
            if [ $SM_TYPE -eq 1 ]
            then
                ./ubuntu_smgr_upgrade.sh $SM_SERVER_PKG_FILE
            else
                ./centos_smgr_upgrade.sh $SM_SERVER_PKG_FILE
            fi
            if [ $? != 0 ] 
            then
                echo "upgrade/installation of server-manager failed, aborting the process"
                exit 1
            fi

            sleep 1
            echo "check if SM has been installed by following checks"
            sleep 30

            netstat -nap | grep 9001
            if [ $? != 0 ]
            then
                echo "Server Manager pkg installation failed!!!"
                exit 1
            else
                echo "Server Manager pkg installed successfully"
            fi

            echo "check if SM client installed"
            if [ -e /usr/bin/server-manager ]
            then
                echo "SM client installed successfully"
            else
                echo "SM client pkg installion failed"
                exit 1
            fi
            sleep 1
        else
            echo "SM PKGs not present in the folder, aborting the process"
            exit 1
        fi

        echo "Installation is fine, delete the images from the server"
        #rm $SM_SERVER_PKG_FILE
    ) "
}

# This function will provision the provided setup.
function provision_using_SM() {
    if [ $SKIP_SM_PROVISION -ne 0 ]
    then
        return 0
    fi
    
    echo "Connect to SM_SERVER to provision the targets/cluster"
    /usr/local/bin/sshpass -p "c0ntrail123" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l root $SM_SERVER_IP " (
        set -e
        echo "provision the target setup"
        server-manager provision -F --cluster_id $CLUSTER_NAME $SMID
        if [ $? != 0 ] 
        then
            echo "Server-manager provision command failed, aborting the process"
            exit 1
        fi
        echo "provisioning in progress please wait ..."
        sleep 100

        #check provisioing status.
        /root/sm_files/check_provision.sh $CLUSTER_NAME
        if [ $? != 0 ]
        then
            echo "Provisioning of the target/cluster failed!!!"
            exit 1
        fi

        server-manager status server --cluster_id $CLUSTER_NAME --detail
        if [ ${BRANCH} == "R1.10" ]
        then
            server-manager delete image $SMID
        else
            server-manager delete image --image_id $SMID
        fi
    ) "
    sleep 120
}

# This function will reimage the provided setup.
# Performs the following steps:
# Adds the iso and contrail packages to SM database
# Adds cluster and servers to SM database
# Does reimage of the setup.
function reimage_using_SM() {
    if [ $SKIP_REIMAGE -ne 0 ]
    then
        return 0
    fi
    # set the parameters required for reimage.
    if [[ $DISTRO =~ ubuntu-12.04 ]]; then
        image="/root/images/ubuntu-12.04.3-server-amd64.iso" 
        pkg_type="contrail-ubuntu-package"
        iso_type="ubuntu"
        SMID=ubuntu12$SKU${BUILDID}
    elif [[ $DISTRO =~ ubuntu-14.04 ]]; then 
        image="/root/images/ubuntu-14.04.1-server-amd64.iso"
        pkg_type="contrail-ubuntu-package"
        iso_type="ubuntu"
        SMID=ubuntu14$SKU${BUILDID}
    elif [[ $DISTRO =~ centos64 ]]; then 
        image="/root/images/CentOS-6.4-x86_64-minimal.iso"
        pkg_type="contrail-centos-package"
        iso_type="centos"
        SMID=centos64$SKU${BUILDID}
    elif [[ $DISTRO =~ centos65 ]]; then 
        image="/root/images/CentOS-6.5-x86_64-minimal.iso"
        pkg_type="contrail-centos-package"
        iso_type="centos"
        SMID=centos65$SKU${BUILDID}
    fi

    #set the parameters for multi/single node setup
    cluster_json="/root/sm_files/$CLUSTER_NAME.json"
    server_json="/root/sm_files/$SERVER_NAME.json"

    echo "Connect to SM_SERVER to reimage and provision the targets"
    /usr/local/bin/sshpass -p "c0ntrail123" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l root $SM_SERVER_IP " (
        set -e
        echo "add required image/server/cluster for reimage and provision of the target"

        echo "delete iso image if it exists"
        if [ ${BRANCH} == "R1.10" ]
        then
            server-manager delete image ${DISTRO}
        else
            server-manager delete image --image_id ${DISTRO}
        fi

        echo "add base ISO image to server manager database"
        if [ ${DISTRO} == "ubuntu-14.04" ]
        then
            server-manager add image -f /root/images/image14.json
        else
            server-manager upload_image $DISTRO ${REIMAGE_PARAM} $iso_type $image
        fi
        echo "check if the image was added successfully"
        server-manager show image | grep $DISTRO
        if [ $? != 0 ] 
        then
            echo "Adding Base ISO image failed"
            exit 1
        fi

        echo "delete contrail package if it exists"
        if [ ${BRANCH} == "R1.10" ]
        then
            server-manager delete image $SMID
        else
            server-manager delete image --image_id $SMID
        fi
        echo "add contrail package to the SM database"
        server-manager upload_image $SMID ${BUILDID} $pkg_type /cs-shared$PKG_FILE
        echo "check if the package was added successfully"
        server-manager show image | grep $SMID
        if [ $? != 0 ] 
        then
            echo "Adding Contrail-packages $SMID failed"
            exit 1
        fi

        server-manager show image

        echo "add cluster to SM database"
        server-manager add cluster -f $cluster_json
        if [ $? != 0 ] 
        then
            echo "Adding cluster to server-manager failed"
            exit 1
        fi
        server-manager show cluster --detail

        echo "add server to SM database"
        server-manager add server -f $server_json
        if [ $? != 0 ] 
        then
            echo "Adding server to server-manager failed"
            exit 1
        fi
        server-manager show server --detail

        echo "reimage the target setup"
        server-manager reimage -F --cluster_id $CLUSTER_NAME $DISTRO
        if [ $? != 0 ] 
        then
            echo "reimage of target nodes failed"
            exit 1
        fi
        echo "reimage in progress please wait ..."
        sleep 300
 
        #check if reimage is completed.
        /root/sm_files/check_reimage.sh $CLUSTER_NAME
        if [ $? != 0 ]
        then
            echo "reimage of target $CLUSTER_NAME failed!!!"
            exit 1
        else
            echo "reimaged the target $CLUSTER_NAME successfully"
        fi
        sleep 150 

        echo "Reimage of the target completed successfully"
    ) "
}


function run_smgr_task() {
    echo "Running tests on $1.."

    if [ ${TEST_SETUP} == "SINGLENODE" ]
    then
        multi_node=0
    elif [ ${TEST_SETUP} == "MULTINODE" ]
    then
        multi_node=1
    else
        echo "TEST_SETUP is not defined, abort the process"
        exit 1
    fi

    if [ -z "$SM_SERVER_IP" ]
    then
        echo "SM_SERVER_IP is not set, unable to proceede, aborting the process"
        exit 1
    fi

    if [ -z $CLUSTER_NAME ] && [ -z $SERVER_NAME ]; then
        echo "CLUSTER_NAME/SERVER_NAME env is not set, aborting the process"
        exit 1
    fi
    create_testbed || die "Failed to create required testbed details"
    bringup_SM_setup || die "Failed to bringup SM setup" 
    reimage_using_SM || die "reimage failed"
    provision_using_SM || die "provision failed"
    run_sanity || die "Run_sanity step failed"
    run_tempest || die "Run_Tempest step failed"
    collect_tech_support || die "Task to collect logs/cores failed"
    echo "Ending test on $1"
}
