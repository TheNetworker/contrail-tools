#!/usr/bin/env bash
TOOLS_WS=${TOOLS_WS:-$(pwd)}
source $TOOLS_WS/testers/environment.sh
export BUILD_MAP=( [ubuntu-12-04]=ubuntu-12.04.3 [centos64_os]=centos-6.4 [centos65]=centos-6.5 [ubuntu-14-04]=ubuntu-14.04 [redhat70]=redhat-7.0)

##
# search_package
function search_package_ceph {
    
    if [ -z $PKG_FILE ]
    then 
        PKG_FILE=`ls ${BUILD_PREFIX}/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/contrail-install-packages*` || die "Unable to find install package"
        export PKG_FILE
        STORAGE_PKG_FILE=`ls ${BUILD_PREFIX}/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/artifacts/contrail-storage-packages*~${SKU}_all.deb` || die "Unable to find install package"
        export STORAGE_PKG_FILE
    else
        pkg_file_name=`basename $PKG_FILE`
        re_ubuntu="contrail-install-packages_(.*)-(.*)~.*(.deb)"
        re_centos="contrail-install-packages-(.*)-(.*)~.*(.rpm)"
        if [[ $pkg_file_name =~ $re_ubuntu ]] ; then
            export BRANCH=${BRANCH:-$BASH_REMATCH[1]}
            export BUILDID=${BUILDID:-$BASH_REMATCH[2]}
            export pkg_type=${BASH_REMATCH[3]}
            export DISTRO=${DISTRO:-ubuntu-12-04}
        elif [[ $pkg_file_name =~ $re_centos ]]; then
            # Centos
            export BRANCH=${BRANCH:-$BASH_REMATCH[1]}
            export BUILDID=${BUILDID:-$BASH_REMATCH[2]}
            export pkg_type=${BASH_REMATCH[3]}
            export DISTRO=${DISTRO:-centos65}
        fi 
    fi
    export REIMAGE_PARAM=${BUILD_MAP[${DISTRO}]}
    export PKG_FILE_DIR=`dirname $PKG_FILE`
}

function use_testbed_file_ceph {
    set -x
    folder_path=''
    tbfile=''
    folder_path=${TOOLS_WS}/testbeds
    if [ $CEPH_PROFILE == "PROF02" ];then
      PROFILE_TBFILE_NAME="testbed_ceph_perf.py"
    elif [ $CEPH_PROFILE == "PROF04" ];then
      PROFILE_TBFILE_NAME="testbed_ceph_perf_prof04.py"
    fi
    tbfile=$folder_path/$PROFILE_TBFILE_NAME
    [ -f $tbfile ] || die "Testbed file $tbfile not found"
    export ABS_PATH_TBFILE=$tbfile
    
    dest_folder_path=${TOOLS_WS}/contrail-fabric-utils/fabfile/testbeds
    cp -f ABS_PATH_TBFILE $dest_folder_path/testbed.py || die "Failed to copy $TBFILE_NAME to  $dest_folder_path/testbed.py"

    iface=`sshpass -p ${TASK_RUNNER_HOST_PASSWORD} ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${TASK_RUNNER_HOST_STRING} '(
       /home/stack/get_pvt_iface.py 10.87.140.197
      )'`
    sed -i "s/HOST1_IFACE/$iface/" $dest_folder_path/testbed.py

    iface=`sshpass -p ${TASK_RUNNER_HOST_PASSWORD} ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${TASK_RUNNER_HOST_STRING} '(
       /home/stack/get_pvt_iface.py 10.87.140.198
      )'`
    sed -i "s/HOST2_IFACE/$iface/" $dest_folder_path/testbed.py

    iface=`sshpass -p ${TASK_RUNNER_HOST_PASSWORD} ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${TASK_RUNNER_HOST_STRING} '(
       /home/stack/get_pvt_iface.py 10.87.140.199
      )'`
    sed -i "s/HOST3_IFACE/$iface/" $dest_folder_path/testbed.py

    iface=`sshpass -p ${TASK_RUNNER_HOST_PASSWORD} ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${TASK_RUNNER_HOST_STRING} '(
       /home/stack/get_pvt_iface.py 10.87.140.200
      )'`
    sed -i "s/HOST4_IFACE/$iface/" $dest_folder_path/testbed.py

    rm -f $TOOLS_WS/contrail-fabric-utils/testbed_env
    ( cd ${TOOLS_WS}/contrail-fabric-utils;
      fab export_testbed_details:testbed_env || echo "fab export_testbed_details failed")

    if [ -f ${TOOLS_WS}/contrail-fabric-utils/testbed_env ]; then
        source ${TOOLS_WS}/contrail-fabric-utils/testbed_env
        source $TOOLS_WS/testers/environment.sh
        sed 's/export //' ${TOOLS_WS}/contrail-fabric-utils/testbed_env > ${TOOLS_WS}/contrail-fabric-utils/plain_testbed_env
    fi
    sed -i '/env.test_repo_dir/d' $dest_folder_path/testbed.py
    echo "env.test_repo_dir='${TOOLS_WS}/contrail-test'" >> $dest_folder_path/testbed.py
    if [ $TESTBED_LOCATION != "LOCAL" ]; then
        export USE_TASK_RUNNER_HOST=1
    fi
}



#####

function create_testbed_ceph {

    if [ "$BRANCH" = "R1.10" ]; then
        export NEW_TEST_INFRA=0
    fi

    checkout_repo || die "Unable to checkout fab/test repos"
    use_testbed_file_ceph || die "Unable to set the testbed properly for use"
    be_ready_to_reimage_remotely || die "Unable to setup the system for reimaging in US"
}

function reimage_setup_ceph {
    if [ $SKIP_REIMAGE -ne 0 ] 
    then 
        return 0
    fi
    if [ $USE_TASK_RUNNER_HOST -eq 1 ]; then
        exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "
            cd /tmp/$TBFILE_NAME/contrail-fabric-utils;
            export HA_TEST=$HA_TEST;
            #fab all_sm_reimage:$CLUSTER_NAME,$REIMAGE_PARAM ;
            if [ $DISTRO == "ubuntu-12.04" ]; then
              server-manager delete image --image_id ubuntu-12.04.3;
              server-manager add image -f /home/stack/image_12.04.3.json;
            else
              server-manager delete image --image_id ubuntu-14.04;
              server-manager add image -f /home/stack/image_14.04.json;
            fi 
            server-manager reimage --no_confirm --cluster_id $CLUSTER_NAME $REIMAGE_PARAM;
            fab wait_till_all_up:attempts=180,reimaged=True;
            fab check_reimage_state" || debug_and_die "reimage_setup failed"
    else
        cd ${TOOLS_WS}/contrail-fabric-utils
        # server-manager reimage
        fab all_sm_reimage:$REIMAGE_PARAM || debug_and_die "Failed to initiate reimage"
        fab wait_till_all_up:attempts=180,reimaged=True || debug_and_die "Not all nodes are up after reimage"
        # verify reimage is successful or failure
        fab check_reimage_state  || debug_and_die "Check to validate reimaging failed"
    fi
    (cd ${TOOLS_WS}/contrail-fabric-utils;
     fab set_allow_unsupported_sfp ) || echo "Unable to enable unsupported sfp"
}

function copy_fabric_test_artifacts_ceph {
    if [ $JUNIPER_INTRANET -eq 0 ]
    then
        echo "Not in Juniper Intranet..skipping copying fab files"
        return 0
    fi
    search_package

    if [ $USE_LATEST_TEST_CODE -eq 1 ]; then
        (cd $TOOLS_WS/
        tar cf contrail-test.tar contrail-test)
        sshpass -p $API_SERVER_HOST_PASSWORD scp ${SSHOPT} $TOOLS_WS/contrail-test.tar  ${API_SERVER_HOST_STRING}:
        exec_cmds -s ${API_SERVER_HOST_STRING} -p ${API_SERVER_HOST_PASSWORD} -c "
            tar xf contrail-test.tar"
    else
        exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "sshpass -p $API_SERVER_HOST_PASSWORD scp $PKG_FILE_DIR/artifacts_extra/contrail-test*.tgz  ${API_SERVER_HOST_STRING}:" 
        exec_cmds -s ${API_SERVER_HOST_STRING} -p ${API_SERVER_HOST_PASSWORD} -c "tar xzf contrail-test*.tgz"
    fi
    exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "sshpass -p $API_SERVER_HOST_PASSWORD scp $PKG_FILE_DIR/artifacts_extra/contrail-fabric-utils*.tgz  ${API_SERVER_HOST_STRING}:"
    exec_cmds -s ${API_SERVER_HOST_STRING} -p ${API_SERVER_HOST_PASSWORD} -c "tar xzf contrail-fabric-utils*.tgz"

    copy_testbedfile_cfgm

}


function bringup_setup_ceph {
    if [ $SKIP_BRINGUP -ne 0 ] 
    then 
        return 0
    fi
    need_reboot=0
    search_package_ceph
    if [ $USE_TASK_RUNNER_HOST -eq 1 ]
    then
       exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c  "mkdir -p $PKG_FILE_DIR/artifacts_extra/"      
       exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "ssh-keygen -f /home/stack/.ssh/known_hosts -R ${API_SERVER_IP}"
       exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "ssh-keyscan -H ${API_SERVER_IP} >> /home/stack/.ssh/known_hosts"
       sshpass -p ${TASK_RUNNER_HOST_PASSWORD} scp $PKG_FILE_DIR/artifacts_extra/contrail-test*.tgz ${TASK_RUNNER_HOST_STRING}:$PKG_FILE_DIR/artifacts_extra/
       sshpass -p ${TASK_RUNNER_HOST_PASSWORD} scp $PKG_FILE_DIR/artifacts_extra/contrail-fabric-utils*.tgz ${TASK_RUNNER_HOST_STRING}:$PKG_FILE_DIR/artifacts_extra/
    fi

    copy_fabric_test_artifacts_ceph || die "Failed to copy fab/test code from artifacts to destination"

    cd ${TOOLS_WS}/contrail-fabric-utils
    # copy contrail-package on all node
    fab prov_esxi
    sleep 60
    fab install_pkg_all:${PKG_FILE} || die "fab install_pkg_all:${PKG_FILE} failed"
    run_setup_shell_script

    # Upgrade biosdevname if ubuntu-14-04
    if [[ ${DISTRO} =~ ubuntu-14-04 ]]; then
        fab upgrade_biosdevname_all:reboot=no
    fi
    # upgrade kernel to latest if its ubuntu
    cd ${TOOLS_WS}/contrail-fabric-utils
    if [[ "${DISTRO}" =~ "ubuntu" ]]; then
        fab upgrade_kernel_all || debug_and_die "Upgrading Kernel failed"
        sleep 60
        fab wait_till_all_up:waitdown=False,attempts=30 || debug_and_die "Failed waiting for nodes to come up"
    fi

    # install contrail packages on all node
    if [[ ${DISTRO} =~ centos ]]
    then
        intf_rename=`exec_cmds -s ${API_SERVER_HOST_STRING} -p ${API_SERVER_HOST_PASSWORD} -c "grep ^env.interface_rename fabric-utils/fabfile/testbeds/testbed.py"`
        shopt -s nocasematch
        if [[ ${intf_rename} =~ False ]]
        then
            exec_cmds -s ${API_SERVER_HOST_STRING} -p ${API_SERVER_HOST_PASSWORD} -c "
                export HA_TEST=$HA_TEST;
                cd fabric-utils;
                fab install_contrail" || debug_and_die "fab install_contrail failed"
        else
            exec_cmds -s ${API_SERVER_HOST_STRING} -p ${API_SERVER_HOST_PASSWORD} -c "
                export HA_TEST=$HA_TEST;
                cd fabric-utils;
                fab install_contrail:False" || debug_and_die "fab install_contrail failed"
            need_reboot=1
        fi
    else
        exec_cmds -s ${API_SERVER_HOST_STRING} -p ${API_SERVER_HOST_PASSWORD} -c "
            export HA_TEST=$HA_TEST;
            cd fabric-utils;
            fab install_contrail" || debug_and_die "fab install_contrail failed"
    fi

    # reboot compute nodes after intf rename package install
    if [[ ${need_reboot} == 1 ]]
    then
        cd ${TOOLS_WS}/contrail-fabric-utils
        fab compute_reboot
    fi

    # setup multi interface, if any
    # provision contrail
    exec_cmds -s ${API_SERVER_HOST_STRING} -p ${API_SERVER_HOST_PASSWORD} -c "
            cd fabric-utils; 
            export HA_TEST=$HA_TEST;
            fab setup_interface || exit 1;
            fab add_static_route 
            fab setup_all:False" || debug_and_die "fab setup_interface or setup_all task failed"

    if [ $SKIP_ZONES -eq 0 ]; then
       (cd ${TOOLS_WS}/contrail-fabric-utils
        fab setup_zones)
    fi
    if [ $ADD_IMAGES -eq 1 ]; then
       (cd ${TOOLS_WS}/contrail-fabric-utils
        fab add_basic_images)
    fi
    # reboot compute nodes after setup
    (cd ${TOOLS_WS}/contrail-fabric-utils
    fab compute_reboot)

}

function bringup_storage {
 cd ${TOOLS_WS}/contrail-fabric-utils
 fab install_storage_pkg_all:${STORAGE_PKG_FILE} || die "fab_install_storage_pkg_all failed" 
 fab install_storage
 fab setup_storage

}

function reimage_and_bringup_ceph {
    if [ $SKIP_REIMAGE -eq 0 ]
    then
      reimage_setup_ceph || debug_and_die "Reimage failed!"
      fab cleanup_repo
    fi
    if [ $SKIP_CONTRAIL_BRINGUP -eq 0 ]
    then
      bringup_setup_ceph || debug_and_die "Bringup contrail failed!"
      sleep 120
      fab restore_repo
    fi
    if [ $SKIP_STORAGE_BRINGUP -eq 0 ]
    then
      search_package_ceph
      bringup_storage || debug_and_die "Bringup storage failed!"
    fi

    # bring up ceph
}

# run_sanity serial/parallel
function run_sanity {
    if [ $SKIP_SANITY -ne 0 ]
    then
        return 0
    fi
    search_package_ceph
    copy_fabric_test_artifacts
    run_fab "setup_test_env"
    # check venv exist before running test
    check_venv_exists
    setup_sanity_base
    #stop_on_failure
}


function run_ceph_check {

  result=`exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c  "/home/stack/check_ceph_status.py $CLUSTER_NAME $OSD_COUNT"`
  echo $result | grep "CEPH_STATUS_CHECK_OK"
  return_val=`echo $?`

  if [[ $return_val != 0 ]]
  then
    die "CEPH_STATUS_CHECK : FAILED"
  else
    echo "CEPH_STATUS_CHECK : PASS"
  fi

  exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "/home/stack/ceph_scripts/mfc_snapshot.py /home/stack/ceph_scripts/ceph_install.conf.1428538975.36 001 /home/stack/ceph_scripts/log1 /home/stack/ceph_scripts/SMOKE_CEPH_PERF.config"

}

function run_ceph_fab_sanity() {
    create_testbed_ceph || die "Failed to create required testbed details"
    echo "Running tests on $TBFILE_NAME .." 
    reimage_and_bringup_ceph
    run_ceph_check || die "run_ceph_check step failed"
    #run_tempest || die "Run_Tempest step failed"
    echo "Test Done" 
    collect_tech_support || die "Task to collect logs/cores failed"
    echo "Ending test on $TBFILE_NAME"
}
