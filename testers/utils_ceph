#!/usr/bin/env bash
TOOLS_WS=${TOOLS_WS:-$(pwd)}
source $TOOLS_WS/testers/environment.sh
export BUILD_MAP=( [ubuntu-12-04]=ubuntu-12.04.3 [centos64_os]=centos-6.4 [centos65]=centos-6.5 [ubuntu-14-04]=ubuntu-14.04 [redhat70]=redhat-7.0)

##
# search_package
function search_package_ceph {
    
    if [ -z $PKG_FILE ]
    then 
        PKG_FILE=`ls /cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/contrail-install-packages*` || die "Unable to find install package"
        export PKG_FILE
        STORAGE_PKG_FILE=`ls /cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/artifacts/contrail-storage-packages*~${SKU}_all.deb` || die "Unable to find install package"
        export STORAGE_PKG_FILE
    else
        pkg_file_name=`basename $PKG_FILE`
        re_ubuntu="contrail-install-packages_(.*)-(.*)~.*(.deb)"
        re_centos="contrail-install-packages-(.*)-(.*)~.*(.rpm)"
        if [[ $pkg_file_name =~ $re_ubuntu ]] ; then
            export BRANCH=${BRANCH:-$BASH_REMATCH[1]}
            export BUILDID=${BUILDID:-$BASH_REMATCH[2]}
            export pkg_type=${BASH_REMATCH[3]}
            export DISTRO=${DISTRO:-ubuntu-12-04}
        elif [[ $pkg_file_name =~ $re_centos ]]; then
            # Centos
            export BRANCH=${BRANCH:-$BASH_REMATCH[1]}
            export BUILDID=${BUILDID:-$BASH_REMATCH[2]}
            export pkg_type=${BASH_REMATCH[3]}
            export DISTRO=${DISTRO:-centos65}
        fi 
    fi
    export REIMAGE_PARAM=${BUILD_MAP[${DISTRO}]}
    export PKG_FILE_DIR=`dirname $PKG_FILE`
}


#####

function create_testbed_ceph {

    if [ $PKG_LOCAL -eq 1 ]
    then
       PKG_FILE="${PKG_LOCAL_PATH}/${CONTRAIL_LOCAL_PKG_FILE}"
       export PKG_FILE
       STORAGE_PKG_FILE="${PKG_LOCAL_PATH}/${STORAGE_LOCAL_PKG_FILE}"
       export STORAGE_PKG_FILE
    else
        search_package_ceph || die "Unable to locate package"
    fi

    if [ "$BRANCH" = "R1.10" ]; then
        export NEW_TEST_INFRA=0
    fi

    checkout_repo || die "Unable to checkout fab/test repos"
    use_testbed_file || die "Unable to set the testbed properly for use"
    be_ready_to_reimage_remotely || die "Unable to setup the system for reimaging in US"
}

function reimage_setup_ceph {
    if [ $SKIP_REIMAGE -ne 0 ] 
    then 
        return 0
    fi
    if [ $USE_TASK_RUNNER_HOST -eq 1 ]; then
        exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "
            cd /tmp/$TBFILE_NAME/contrail-fabric-utils;
            export HA_TEST=$HA_TEST;
            #fab all_sm_reimage:$CLUSTER_NAME,$REIMAGE_PARAM ;
            server-manager reimage --no_confirm --cluster_id $CLUSTER_NAME $REIMAGE_PARAM;
            fab wait_till_all_up:attempts=180,reimaged=True;
            fab check_reimage_state" || debug_and_die "reimage_setup failed"
    else
        cd ${TOOLS_WS}/contrail-fabric-utils
        # server-manager reimage
        fab all_sm_reimage:$REIMAGE_PARAM || debug_and_die "Failed to initiate reimage"
        fab wait_till_all_up:attempts=180,reimaged=True || debug_and_die "Not all nodes are up after reimage"
        # verify reimage is successful or failure
        fab check_reimage_state  || debug_and_die "Check to validate reimaging failed"
    fi
    (cd ${TOOLS_WS}/contrail-fabric-utils;
     fab set_allow_unsupported_sfp ) || echo "Unable to enable unsupported sfp"
}


function reimage_and_bringup_ceph {
    reimage_setup_ceph || debug_and_die "Reimage failed!"
    fab cleanup_repo
    bringup_setup || debug_and_die "Bringup failed!"
    sleep 120
    fab restore_repo
}


function run_task_ceph() {
    create_testbed || die "Failed to create required testbed details"
    echo "Running tests on $TBFILE_NAME .." 
    reimage_and_bringup_ceph
    #bringup_setup || die "Bringup failed"
    run_sanity || die "Run_sanity step failed"
    run_tempest || die "Run_Tempest step failed"
    echo "Test Done" 
    collect_tech_support || die "Task to collect logs/cores failed"
    echo "Ending test on $TBFILE_NAME"
}
