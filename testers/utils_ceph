#!/usr/bin/env bash
TOOLS_WS=${TOOLS_WS:-$(pwd)}
source $TOOLS_WS/testers/environment.sh
export BUILD_MAP=( [ubuntu-12-04]=ubuntu-12.04.3 [centos64_os]=centos-6.4 [centos65]=centos-6.5 [ubuntu-14-04]=ubuntu-14.04 [redhat70]=redhat-7.0)

##
# search_package
function search_package_ceph {

    if [ $PKG_LOCAL -eq 0 ]
    then
      if [ $INSTALL_MODE == "SM" ]
      then
        SM_INSTALLER_PKG_FILE=$SM_SERVER_LOCAL_PKG_FILE
      fi
      INSTALL_PKG_FILE=$INSTALL_PKG_FILE_LOCAL
      STORAGE_PKG_FILE=$STORAGE_PKG_FILE_LOCAL  
    else
      INSTALL_PKG_FILE=`ls ${BUILD_PREFIX}/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/contrail-install-packages*` || die "Unable to find install package"
      STORAGE_PKG_FILE=`ls ${BUILD_PREFIX}/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/artifacts/contrail-storage-packages*~${SKU}_all.deb` || die "Unable to find storage package"
      if [ $INSTALL_MODE == "SM" ]
      then
       SM_INSTALLER_PKG_FILE=`ls ${BUILD_PREFIX}/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/contrail-server-manager-installer*` || die "Unable to find SM install package"
      fi
    fi
    
    export INSTALL_PKG_TYPE="contrail-ubuntu-package"
    export STORAGE_PKG_TYPE="contrail-storage-ubuntu-package"
    export INSTALL_PKG_FILE
    export STORAGE_PKG_FILE
    export SM_INSTALLER_PKG_FILE

    export REIMAGE_PARAM=${BUILD_MAP[${DISTRO}]}
    export PKG_FILE_DIR=`dirname $INSTALL_PKG_FILE`

}

function update_testbed_file {

    iface=`sshpass -p ${TASK_RUNNER_HOST_PASSWORD} ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${TASK_RUNNER_HOST_STRING} '(
       /home/stack/get_pvt_iface.py HOST1
      )'`
    sed -i "s/HOST1_IFACE/$iface/" $ABS_PATH_TBFILE

    iface=`sshpass -p ${TASK_RUNNER_HOST_PASSWORD} ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${TASK_RUNNER_HOST_STRING} '(
       /home/stack/get_pvt_iface.py HOST2
      )'`
    sed -i "s/HOST2_IFACE/$iface/" $ABS_PATH_TBFILE

    iface=`sshpass -p ${TASK_RUNNER_HOST_PASSWORD} ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${TASK_RUNNER_HOST_STRING} '(
       /home/stack/get_pvt_iface.py HOST3
      )'`
    sed -i "s/HOST3_IFACE/$iface/" $ABS_PATH_TBFILE

    iface=`sshpass -p ${TASK_RUNNER_HOST_PASSWORD} ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${TASK_RUNNER_HOST_STRING} '(
       /home/stack/get_pvt_iface.py HOST4
      )'`
    sed -i "s/HOST4_IFACE/$iface/" $ABS_PATH_TBFILE

    sshpass -p ${TASK_RUNNER_HOST_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $ABS_PATH_TBFILE ${TASK_RUNNER_HOST_STRING}:/tmp/$TBFILE_NAME/fabric-utils/fabfile/testbeds/testbed.py

}


function copy_tbfile {
    folder_path=${TOOLS_WS}/testbeds
    if [ $CEPH_PROFILE == "PROF01" ];then
      PROFILE_TBFILE_NAME=$AVAILABLE_TESTBEDS
    elif [ $CEPH_PROFILE == "PROF02" ];then
      PROFILE_TBFILE_NAME=$AVAILABLE_TESTBEDS
    elif [ $CEPH_PROFILE == "PROF04" ];then
      PROFILE_TBFILE_NAME="testbed_ceph_perf_prof04.py"
    fi
    tbfile=$folder_path/$PROFILE_TBFILE_NAME
    [ -f $tbfile ] || die "Testbed file $tbfile not found"
    export ABS_PATH_TBFILE=$tbfile
 
    sshpass -p ${TASK_RUNNER_HOST_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $ABS_PATH_TBFILE ${TASK_RUNNER_HOST_STRING}:/tmp/$TBFILE_NAME/fabric-utils/fabfile/testbeds/testbed.py

}


#####

function create_testbed_ceph {

    search_package_ceph
    checkout_repo

    exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "rm -rf /tmp/$TBFILE_NAME/"      
    exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "mkdir /tmp/$TBFILE_NAME/"      
   
    sshpass -p ${TASK_RUNNER_HOST_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $PKG_FILE_DIR/artifacts_extra/contrail-fabric-utils*.tgz ${TASK_RUNNER_HOST_STRING}:/tmp/$TBFILE_NAME/
    exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "cd /tmp/$TBFILE_NAME/;tar xzf contrail-fabric-utils*.tgz" 

    copy_tbfile

    if [ $PKG_LOCAL -eq 0 ]
    then
     return
    fi

    if [ $COPY_BUILD_PKG_TO_TASK_RUNNER -eq 1 ]
    then
      exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "rm -rf $PKG_FILE_DIR"      
      exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "mkdir -p $PKG_FILE_DIR/artifacts_extra/"      
      exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "mkdir -p $PKG_FILE_DIR/artifacts/"      
     
      sshpass -p ${TASK_RUNNER_HOST_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $INSTALL_PKG_FILE ${TASK_RUNNER_HOST_STRING}:$INSTALL_PKG_FILE
      sshpass -p ${TASK_RUNNER_HOST_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $STORAGE_PKG_FILE ${TASK_RUNNER_HOST_STRING}:$STORAGE_PKG_FILE
      if [ $INSTALL_MODE == "SM" ]
      then
        sshpass -p ${TASK_RUNNER_HOST_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SM_INSTALLER_PKG_FILE ${TASK_RUNNER_HOST_STRING}:$SM_INSTALLER_PKG_FILE
      fi
    fi 

}

function reimage_setup_ceph {
    if [ $SKIP_REIMAGE -ne 0 ] 
    then 
        return 0
    fi
    if [ $USE_TASK_RUNNER_HOST -eq 1 ]; then
        exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "
            cd /tmp/$TBFILE_NAME/fabric-utils;
            export HA_TEST=$HA_TEST;
            #fab all_sm_reimage:$CLUSTER_NAME,$REIMAGE_PARAM ;
            if [ $DISTRO == "ubuntu-12-04" ]; then
              server-manager delete image --image_id ubuntu-12.04.3;
              server-manager add image -f /home/stack/image_12.04.3.json;
            else
              server-manager delete image --image_id ubuntu-14.04;
              server-manager add image -f /home/stack/image_14.04.json;
            fi 
            server-manager reimage --no_confirm --cluster_id $CLUSTER_NAME $REIMAGE_PARAM;
            fab wait_till_all_up:attempts=180,reimaged=True;
            fab check_reimage_state" || debug_and_die_local "reimage_setup failed"
    fi
}

function bringup_setup_contrail {
    if [ $SKIP_BRINGUP -ne 0 ] 
    then 
        return 0
    fi

    exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "
          cd /tmp/${TBFILE_NAME}/fabric-utils;
          fab install_pkg_all:${INSTALL_PKG_FILE} || die 'fab install_pkg_all:${INSTALL_PKG_FILE} failed'
          " || debug_and_die_local "install_pkg_all failed"

    if [[ "${DISTRO}" =~ "ubuntu" ]]; then
        exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "
          cd /tmp/${TBFILE_NAME}/fabric-utils;
          fab upgrade_kernel_all;
          sleep 60;
          fab wait_till_all_up:waitdown=False,attempts=30 " || debug_and_die_local "kernel upgrade/Failed waiting for nodes to come up"
    fi

    exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "
            cd /tmp/${TBFILE_NAME}/fabric-utils;
            export HA_TEST=$HA_TEST;
            cd fabric-utils;
            fab install_contrail" || debug_and_die_local "fab install_contrail failed"

    exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "
            cd /tmp/${TBFILE_NAME}/fabric-utils;
            export HA_TEST=$HA_TEST;
            fab setup_interface || exit 1;
            fab add_static_route 
            fab setup_all" || debug_and_die_local "fab setup_interface or setup_all task failed"
}

function bringup_storage {
    exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "
            cd /tmp/${TBFILE_NAME}/fabric-utils;
            fab install_storage_pkg_all:${STORAGE_PKG_FILE};
            fab install_storage;
            fab setup_storage" || debug_and_die_local "install_storage_pkg_all failed"

}

function reimage_and_bringup_ceph {

    if [ $SKIP_REIMAGE -eq 0 ]
    then
      reimage_setup_ceph || debug_and_die_local "Reimage failed!"
    fi

    update_testbed_file || die "Unable to set the testbed properly for use"

    if [ $SKIP_CONTRAIL_BRINGUP -eq 0 ]
    then
      bringup_setup_contrail || debug_and_die_local "Bringup contrail failed!"
    fi

    if [ $SKIP_STORAGE_BRINGUP -eq 0 ]
    then
      bringup_storage || debug_and_die_local "Bringup storage failed!"
    fi

    # bring up ceph
}

function run_ceph_check {

  result=`exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c  "/home/stack/check_ceph_status.py $CLUSTER_NAME $OSD_COUNT"`
  echo $result | grep "CEPH_STATUS_CHECK_OK"
  return_val=`echo $?`

  if [[ $return_val != 0 ]]
  then
    die "CEPH_STATUS_CHECK : FAILED"
  else
    echo "CEPH_STATUS_CHECK : PASS"
  fi

}

function collect_tech_support_local {
    if [ $SKIP_LOGS_COLLECTION -ne 0 ]
    then
        return 0
    fi

    dest_dir_folder=$DEBUG_LOG_DIR/CONFIG_NODE/${SCRIPT_TIMESTAMP}
    debug_cmds="export HA_TEST=$HA_TEST && fab attach_logs_cores:$DEBUG_LOG_DIR/CONFIG_NODE,${SCRIPT_TIMESTAMP} ; cp fabfile/testbeds/testbed.py $dest_dir_folder ;  cp *.log $dest_dir_folder"
          
    exec_cmds -s ${TASK_RUNNER_HOST_STRING} -p ${TASK_RUNNER_HOST_PASSWORD} -c "
            cd /tmp/$TBFILE_NAME/fabric-utils;
            $debug_cmds"
}


function debug_and_die_local
{
    local message=$1
    if [ $LOCK_TESTBED_ON_FAILURE = 1 ]; then
        echo "Testbed is set to be locked on failure"
        if [[ $message =~ 'Test failures exceed' ]]; then
            collect_tech_support_local
        fi
        export RELEASE_TESTBED=0
        (  
            set -x
            flock 5
            echo "Locking testbed $tb_lock_file for debugging"
            echo "Testbed locked..Unlock when debug complete" >> $tb_lock_file
            cat $tb_lock_file
        ) 5>${LOCK_FILE_DIR}/lockfile
    else
        collect_tech_support_local
    fi
    [ -z "$message" ] && message="Died"
    echo "${BASH_SOURCE[1]}: line ${BASH_LINENO[0]}: ${FUNCNAME[1]}: $message." >&2
    cat $tb_lock_file
    exit 1
}
function run_ceph_fab_sanity() {
    echo "Running tests on $TBFILE_NAME .." 
    create_testbed_ceph
    reimage_and_bringup_ceph
    run_ceph_check || die "run_ceph_check step failed"
    #run_tempest || die "Run_Tempest step failed"
    echo "Test Done" 
    collect_tech_support_local || die "Task to collect logs/cores failed"
    echo "Ending test on $TBFILE_NAME"
}
