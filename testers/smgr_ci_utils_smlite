#!/usr/bin/env bash
#!/usr/bin/awk -f
TOOLS_WS=${TOOLS_WS:-$(pwd)}
multi_node=0
source $TOOLS_WS/testers/smgr_utils

#install ant on cfgm0
function install_ant() {

    sshpass -p c0ntrail123 ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $API_SERVER_HOST_STRING " (
        set -x
        echo "Temporary workaround to installfabric on CFGM"
        /opt/contrail/contrail_packages/setup.sh
        cp /root/sources.list /etc/apt/

        #remove mediubuntu entry from sources.list temporarily as it's causing apt-get update to fail.
        sed -i".bak" '/packages.medibuntu.org/d' /etc/apt/sources.list

        apt-get update
        apt-get -y --force-yes --allow-unauthenticated install ant
        if [ $? == 0 ]
        then
            echo "ant package installation is done"
        else
            echo "ant  package installation failed"
            exit 1
        fi
        #temporary fix to take care of issue due to different paramiko version
        pip uninstall -y paramiko
        pip install paramiko==1.17.0

        mv /usr/local/lib/python2.7/dist-packages/easy-install.pth /usr/local/lib/python2.7/dist-packages/easy-install.pth.orig
        if [ $? == 0 ]
        then
            echo "moving easy-install.pth sucessfull"
        else
            echo "moving easy-install.pth failed, sanity will fail to run"
        fi   
    ) "

}


function add_sourcelist_SMLite() {
 
    set -x
    HOSTS=`cat "${TOOLS_WS}/testbeds/${tb_filename}" | grep "host[0-9]\s\=" | awk '{print $3}' | awk -F'@' '{print $2}' | tr -d "'"`
    echo $HOSTS
    for word in $HOSTS
    do
        echo $word
        sshpass -p "c0ntrail123" ssh -l root -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $word " {
   
            cp /etc/apt/sources.list /etc/apt/sources.list.orig
            sed -i".bak" '/google/d' /etc/apt/sources.list.save
            cp /etc/apt/sources.list.save /etc/apt/sources.list
            if [ $? != 0 ]
                then
                echo "failed to replace sources.list with sources.list.save on node!!!"
            else
                echo "replaced sources.list with sources.list.save on node"
            fi
            #remove mediubuntu entry from sources.list temporarily as it's causing apt-get update to fail.
            sed -i".bak" '/packages.medibuntu.org/d' /etc/apt/sources.list

            apt-get update
            apt-get -y install gdb
    } "
    sleep 10
    done


}



#check if the server-manager pkgs are available in artifacts folder.
function SMLite_check_SM_pkg_availability() {
    count=0
    SMLite_get_node_distro
    smpkg_dir="/cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/artifacts"
    echo $SERVER_MANAGER_INSTALLER

    while [ "$count" -ne 36 ]; do
        if ls $smpkg_dir/${SERVER_MANAGER_INSTALLER}
        then
            echo "SM pkgs are present in artifacts"
            break
        else
            if [ "$count" -eq 35 ]
            then
                echo "waited for an hour, still pkgs are not found, aborting"
                exit 1
            fi
            echo "SM pkgs are still not there, let's wait..."
            sleep 100
            count=$((count+1))
        fi
    done
}


function SMLite_get_node_distro() {
    lsb_dist_output=`exec_cmds -s ${API_SERVER_HOST_STRING} -p ${API_SERVER_HOST_PASSWORD} -c "
        cat /etc/lsb-release"`
    if [[ $lsb_dist_output =~ Ubuntu ]]; then
        lsb_dist=Ubuntu
        SERVER_MANAGER_INSTALLER="contrail-server-manager-installer_*\.*-${BUILDID}\~$SKU\_all.deb"
        if [ $USE_CLOUD_PKG -eq 1 ]; then
            CONTRAIL_PACKAGE="contrail-install-packages*.tgz"
        else
            CONTRAIL_PACKAGE="contrail-install-packages*.deb"
        fi
    else
        lsb_dist=SomeOtherOS
        SERVER_MANAGER_INSTALLER="contrail-server-manager-installer-*\.*-${BUILDID}*.el6.noarch.rpm"
        CONTRAIL_PACKAGE="contrail-install-packages*(.rpm)"
    fi
    export lsb_dist
    export SERVER_MANAGER_INSTALLER
    export CONTRAIL_PACKAGE
}

#copy SM-lite and contrail-packages to CFGM&SM-Lite server
function copy_smlite_pkg() {

    set -x
    #check if SM pkgs are available in artifacts before proceeding further.
    SMLite_check_SM_pkg_availability || die "SM pkg not available in artifacts"

    pkg_dir="/cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/"
    echo $CONTRAIL_PACKAGE
    echo $SERVER_MANAGER_INSTALLER
    sleep 30
    sshpass -p "c0ntrail123" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r /${pkg_dir}/artifacts/${SERVER_MANAGER_INSTALLER} /${pkg_dir}/${CONTRAIL_PACKAGE} $ABS_PATH_TBFILE /home/stack/smlite/check_provision_cliff.sh /home/stack/smlite/sources.list ${API_SERVER_HOST_STRING}:/root/
    if [ $? == 0 ]
    then
        echo "Copy of ${SERVER_MANAGER_INSTALLER} and ${CONTRAIL_PACKAGE} to SMLITE server is successfull"
    else
        echo "Copy of ${SERVER_MANAGER_INSTALLER} and ${CONTRAIL_PACKAGE} to SMLITE server is failed!!!"
        exit 1
    fi

}



# This function will provision the provided setup.
function provision_using_SMLite() {
    set -x
    if [ $SKIP_SM_PROVISION -ne 0 ]
    then
        return 0
    fi
   
    echo "Connect to SM_SERVER to provision the targets/cluster"

    sshpass -p "c0ntrail123" ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $API_SERVER_HOST_STRING " (
        set -e
        set -x
        echo "Install SM-Lite and provision the target setup"
        dpkg -i /root/${SERVER_MANAGER_INSTALLER}
        /opt/contrail/contrail_server_manager/provision.sh -c /root/${CONTRAIL_PACKAGE} -t /root/${tb_filename} -cid $CLUSTER_NAME


    ) "
    sleep 600 
    #assumption is by this time, SM is installed on cfgm0 and provision is at kernel upgrade and node reboot.

    cluster_name=$(sshpass -p "c0ntrail123" ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $API_SERVER_HOST_STRING " (
        server-manager-client display cluster --json | grep id | cut -d : -f2 | sed -e 's/^ \"//' -e 's/\"$//'
    ) ")
    cluster_name=`echo $cluster_name | tr -d '\r'`

    sshpass -p "c0ntrail123" ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $API_SERVER_HOST_STRING " (
        set -e
        set -x
        #check provisioing status.
        /root/check_provision_cliff.sh $cluster_name
        if [ "$?" -eq 0 ]
        then
            echo "Provisioning of the target/cluster is sucessfull!!!"
        else
            echo "Provisioning of the target/cluster failed!!! aborting the process"
            exit 1
        fi
    ) "; rv=$?
    #special case for SINGLE NODE
    if [ ${TEST_SETUP} == "SINGLENODE" ]
    then
        #connection to cfgm0 could have lost when provision of compute is done and node reboots.
        #let's wait for node to come back.
        sleep 180

        sshpass -p "c0ntrail123" ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $API_SERVER_HOST_STRING " (
            set -e
            set -x
            #check provisioing status.
            /root/check_provision_cliff.sh $cluster_name
            if [ "$?" -eq 0 ]
            then
                echo "Provisioning of the target/cluster is sucessfull!!!"
            else
                echo "Provisioning of the target/cluster failed!!! aborting the process"
                exit 1
            fi
        ) "; rv=$?
    fi

    if [ $rv == 0 ]
    then
        echo "Provisioning of the target/cluster is sucessfull!!!"
    else
        echo "Provisioning of the target/cluster failed!!! aborting the process"
        exit 1
    fi

}

function run_smgr_regression_task() {
    echo "Running tests on $1.."

    if [ ${TEST_SETUP} == "SINGLENODE" ]
    then
        multi_node=0
    elif [ ${TEST_SETUP} == "MULTINODE" ]
    then
        multi_node=1
    elif [ ${TEST_SETUP} == "MULTIINTERFACE" ]
    then
        multi_node=1
    else
        echo "TEST_SETUP is not defined, abort the process"
        exit 1
    fi

    if [ -z "$SM_SERVER_IP" ]
    then
        echo "SM_SERVER_IP is not set, unable to proceede, aborting the process"
        exit 1
    fi

    if [ -z $CLUSTER_NAME ] && [ -z $SERVER_NAME ]; then
        echo "CLUSTER_NAME/SERVER_NAME env is not set, aborting the process"
        exit 1
    fi

    create_testbed || die "Failed to create required testbed details"
    bringup_SM_setup || die "Failed to bringup SM setup"
    reimage_using_SM_cliff_client || debug_and_die "reimage failed"
    copy_smlite_pkg || die "copy of sm-lite packages failed"
    provision_using_SMLite || die "provision failed"
    add_sourcelist_SMLite || die "source.list copy failed on all target nodes"
    install_ant || die "ant installation failed on cfgm"
    run_sanity || die "Run_sanity step failed"
    run_tempest || die "Run_Tempest step failed"
    collect_tech_support || die "Task to collect logs/cores failed"
    echo "Ending test on $1"
}

function run_smgr_task() {
    echo "Running tests on $1.."

    #use contrail cloud packages for branch R3.1 and above to use deb packages
    if [ "$BRANCH" \> "R3.1" ]; then
        export USE_CLOUD_PKG=1
    fi

    if [ ${TEST_SETUP} == "SINGLENODE" ]
    then
        multi_node=0
    elif [ ${TEST_SETUP} == "MULTINODE" ]
    then
        multi_node=1
    elif [ ${TEST_SETUP} == "MULTIINTERFACE" ]
    then
        multi_node=1
    else
        echo "TEST_SETUP is not defined, abort the process"
        exit 1
    fi

    if [ -z "$SM_SERVER_IP" ]
    then
        echo "SM_SERVER_IP is not set, unable to proceede, aborting the process"
        exit 1
    fi

    if [ -z $CLUSTER_NAME ] && [ -z $SERVER_NAME ]; then
        echo "CLUSTER_NAME/SERVER_NAME env is not set, aborting the process"
        exit 1
    fi
    create_testbed || die "Failed to create required testbed details"
    bringup_SM_setup || debug_and_die "Failed to bringup SM setup"
    reimage_using_SM_cliff_client || debug_and_die "reimage failed"
    copy_smlite_pkg || die "copy of sm-lite packages failed"
    provision_using_SMLite || die "provision failed"
    add_sourcelist_SMLite || die "source.list copy failed on all target nodes"
    check_kernel_upgrade || die "kernel upgrade failed"

    #add fab basic images.
    if [ $ADD_IMAGES -eq 1 ]; then
       (cd ${TOOLS_WS}/contrail-fabric-utils
        fab add_basic_images)
    fi

    search_package
    pkg_file_name=`basename $PKG_FILE`
    if [[ $USE_CLOUD_PKG -eq 1 || $USE_NETWORKING_PKG -eq 1 ]]; then
        export PACKAGE_VERSION=`echo ${pkg_file_name} | sed 's/contrail-installer-packages[-_]\([0-9\.\-]*\).*/\1/'`
    else
        export PACKAGE_VERSION=`echo ${pkg_file_name} | sed 's/contrail-install-packages[-_]\([0-9\.\-]*\).*/\1/'`
    fi
    if [[ -z $TEST_HOST_STRING ]]; then
        export TEST_HOST_STRING=$API_SERVER_HOST_STRING
        export TEST_HOST_PASSWORD=$API_SERVER_HOST_PASSWORD
    fi
    export TEST_HOST_IP=`echo $TEST_HOST_STRING | cut -d @ -f2`
    export TEST_HOST_USER=`echo $TEST_HOST_STRING | cut -d @ -f1`
    #install_third_party_pkgs || die "installing GDB/ant failed"
    setup_testnode || die "test node setup failed"
    install_dep_pkgs_for_test
    run_sanity_simple || die "run_sanity_simple failed"
    run_tempest || die "Run_Tempest step failed"
    collect_tech_support || die "Task to collect logs/cores failed"
    echo "Ending test on $1"
}
