#!/usr/bin/env bash
#!/usr/bin/awk -f
TOOLS_WS=${TOOLS_WS:-$(pwd)}
multi_node=0

#install ant on cfgm0
function install_ant() {

    sshpass -p c0ntrail123 ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $API_SERVER_HOST_STRING " (
        set -x
        echo "Temporary workaround to installfabric on CFGM"
        /opt/contrail/contrail_packages/setup.sh
        cp /root/sources.list /etc/apt/
        apt-get update
        apt-get -y --force-yes --allow-unauthenticated install ant
        if [ $? == 0 ]
        then
            echo "ant package installation is done"
        else
            echo "ant  package installation failed"
            exit 1
        fi
        mv /usr/local/lib/python2.7/dist-packages/easy-install.pth /usr/local/lib/python2.7/dist-packages/easy-install.pth.orig
        if [ $? == 0 ]
        then
            echo "moving easy-install.pth sucessfull"
        else
            echo "moving easy-install.pth failed, sanity will fail to run"
        fi   
    ) "

}


function add_sourcelist() {
 
    set -x
    HOSTS=`cat "${TOOLS_WS}/testbeds/${tb_filename}" | grep "host[0-9]\s\=" | awk '{print $3}' | awk -F'@' '{print $2}' | tr -d "'"`
    echo $HOSTS
    for word in $HOSTS
    do
        echo $word
        sshpass -p "c0ntrail123" ssh -l root -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $word " {
   
            cp /etc/apt/sources.list /etc/apt/sources.list.orig
            cp /etc/apt/sources.list.save /etc/apt/sources.list
            if [ $? != 0 ]
                then
                echo "failed to replace sources.list with sources.list.save on node!!!"
            else
                echo "replaced sources.list with sources.list.save on node"
            fi
            apt-get update
    } "
    sleep 10
    done


}



#check if the server-manager pkgs are available in artifacts folder.
function check_SM_pkg_availability() {
    count=0
    get_node_distro
    smpkg_dir="/cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/artifacts"
    echo $SERVER_MANAGER_INSTALLER

    while [ "$count" -ne 36 ]; do
        if ls $smpkg_dir/${SERVER_MANAGER_INSTALLER}
        then
            echo "SM pkgs are present in artifacts"
            break
        else
            if [ "$count" -eq 35 ]
            then
                echo "waited for an hour, still pkgs are not found, aborting"
                exit 1
            fi
            echo "SM pkgs are still not there, let's wait..."
            sleep 100
            count=$((count+1))
        fi
    done
}


function get_node_distro() {
    lsb_dist_output=`exec_cmds -s ${API_SERVER_HOST_STRING} -p ${API_SERVER_HOST_PASSWORD} -c "
        cat /etc/lsb-release"`
    if [[ $lsb_dist_output =~ Ubuntu ]]; then
        lsb_dist=Ubuntu
        SERVER_MANAGER_INSTALLER="contrail-server-manager-installer_*\.*-${BUILDID}\~$SKU\_all.deb"
        CONTRAIL_PACKAGE="contrail-install-packages*.deb"
    else
        lsb_dist=SomeOtherOS
        SERVER_MANAGER_INSTALLER="contrail-server-manager-installer-*\.*-${BUILDID}*.el6.noarch.rpm"
        CONTRAIL_PACKAGE="contrail-install-packages*(.rpm)"
    fi
    export lsb_dist
    export SERVER_MANAGER_INSTALLER
    export CONTRAIL_PACKAGE
}

#copy SM-lite and contrail-packages to CFGM&SM-Lite server
function copy_smlite_pkg() {

    set -x
    #check if SM pkgs are available in artifacts before proceeding further.
    check_SM_pkg_availability || die "SM pkg not available in artifacts"
    get_node_distro 

    pkg_dir="/cs-shared/github-build/${BRANCH}/${BUILDID}/${DISTRO}/${SKU}/"
    echo $CONTRAIL_PACKAGE
    echo $SERVER_MANAGER_INSTALLER
    /usr/local/bin/sshpass -p "c0ntrail123" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r /${pkg_dir}/artifacts/${SERVER_MANAGER_INSTALLER} /${pkg_dir}/${CONTRAIL_PACKAGE} /home/stack/contrail-tools/testbeds/${tb_filename} /home/stack/smlite/check_provision.sh /home/stack/smlite/sources.list ${API_SERVER_HOST_STRING}:/root/
    if [ $? == 0 ]
    then
        echo "Copy of ${SERVER_MANAGER_INSTALLER} and ${CONTRAIL_PACKAGE} to SMLITE server is successfull"
    else
        echo "Copy of ${SERVER_MANAGER_INSTALLER} and ${CONTRAIL_PACKAGE} to SMLITE server is failed!!!"
        exit 1
    fi

}



# This function will provision the provided setup.
function provision_using_SM() {
    set -x
    if [ $SKIP_SM_PROVISION -ne 0 ]
    then
        return 0
    fi
   
    echo "Connect to SM_SERVER to provision the targets/cluster"

    /usr/local/bin/sshpass -p "c0ntrail123" ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $API_SERVER_HOST_STRING " (
        set -e
        set -x
        echo "Install SM-Lite and provision the target setup"
        dpkg -i /root/${SERVER_MANAGER_INSTALLER}
        /opt/contrail/contrail_server_manager/provision.sh -c /root/${CONTRAIL_PACKAGE} -t /root/${tb_filename} -cid $CLUSTER_NAME


    ) "
    sleep 300
    /usr/local/bin/sshpass -p "c0ntrail123" ssh -t -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $API_SERVER_HOST_STRING " (
        
        set -e
        set -x
        #check provisioing status.
        /root/check_provision.sh $CLUSTER_NAME
        if [ $? == 0 ]
        then
            echo "Provisioning of the target/cluster is sucessfull!!!"
        else
            echo "Provisioning of the target/cluster failed!!! aborting the process"
            exit 1
        fi

    ) "
    sleep 200
    if [ $? == 0 ]
    then
        echo "Provisioning of the target/cluster is sucessfull!!!"
    else
        echo "Provisioning of the target/cluster failed!!! aborting the process"
        exit 1
    fi

}
sleep 300

function run_smgr_regression_task() {
    echo "Running tests on $1.."

    create_testbed || die "Failed to create required testbed details"
    #bringup_SM_setup || die "Failed to bringup SM setup"
    reimage_setup || die "reimage failed"
    copy_smlite_pkg || die "copy of sm-lite packages failed"
    provision_using_SM || die "provision failed"
    add_sourcelist || die "source.list copy failed on all target nodes"
    run_sanity || die "Run_sanity step failed"
    run_tempest || die "Run_Tempest step failed"
    collect_tech_support || die "Task to collect logs/cores failed"
    echo "Ending test on $1"
}

function run_smgr_task() {
    echo "Running tests on $1.."


    create_testbed || die "Failed to create required testbed details"
    #bringup_SM_setup || die "Failed to bringup SM setup" 
    reimage_setup || die "reimage failed"
    copy_smlite_pkg || die "copy of sm-lite packages failed"
    provision_using_SM || die "provision failed"
    add_sourcelist || die "source.list copy failed on all target nodes"
    install_ant || die "ant installation failed on cfgm"
    run_sanity || die "Run_sanity step failed"
    run_tempest || die "Run_Tempest step failed"
    collect_tech_support || die "Task to collect logs/cores failed"
    echo "Ending test on $1"
}
